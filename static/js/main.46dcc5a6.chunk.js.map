{"version":3,"sources":["Components/Navbar.js","Components/Alert.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","switchText","defaultProps","aboutText","Alert","alert","msg","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","split","length","App","setMode","setSwitchText","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAKe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACN,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAWJ,sBAAKF,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACJ,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWE,QAAWP,EAAMQ,WAAYC,KAAK,SAASH,GAAG,2BAClG,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,SAAsEV,EAAMW,wBAmB9EZ,EAAOa,aAAe,CAClBR,MAAQ,iBACRS,UAAY,YChCDC,MAhBf,SAAed,GAQX,OACIA,EAAMe,OAAS,sBAAKd,UAAS,sBAAiBD,EAAMe,MAAMV,KAA7B,gCAAiEI,KAAK,QAApF,UACrB,iCAAST,EAAMe,MAAMV,OADA,KACiBL,EAAMe,MAAMC,QCVrC,SAASC,EAASjB,GAC7B,IA+BA,EAAuBkB,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,OAEI,qCACA,sBAAKnB,UAAY,kBAAkBoB,MAAS,CAACC,MAAuB,UAAftB,EAAME,KAAmB,QAAU,SAAxF,UACA,6BAAKF,EAAMuB,UACX,+BACI,qBAAKtB,UAAU,kBAAf,SACI,0BAAUA,UAAU,gBAAgBK,GAAG,8BAA8BkB,MAASL,EAAMM,SAZzE,SAACC,GACpBN,EAAQM,EAAMC,OAAOH,QAWmGI,KAAK,IAAIP,MAAS,CAACQ,gBAAiC,SAAf7B,EAAME,KAAkB,OAAS,QAASoB,MAAuB,UAAftB,EAAME,KAAmB,QAAU,eAGlP,wBAAQD,UAAY,uBAAuBM,QA1CzB,WAElB,IAAIuB,EAAUX,EAAKY,cACnBX,EAAQU,GACR9B,EAAMgC,UAAU,yBAAyB,YAsCzC,kCACA,wBAAQ/B,UAAY,uBAAuBM,QArCzB,WAElB,IAAIuB,EAAUX,EAAKc,cACnBb,EAAQU,GACR9B,EAAMgC,UAAU,yBAAyB,YAiCzC,kCACA,wBAAQ/B,UAAY,uBAAuBM,QAhCtB,WAGrBa,EADc,IAEdpB,EAAMgC,UAAU,UAAU,YA4B1B,wBACA,wBAAQ/B,UAAY,uBAAuBM,QA3BpB,aA2BvB,iCAGA,sBAAKN,UAAY,iBAAiBoB,MAAS,CAACC,MAAuB,UAAftB,EAAME,KAAmB,QAAU,SAAvF,UACI,mDACA,8BAAIiB,EAAKe,MAAM,KAAKC,OAApB,cAAuChB,EAAKgB,OAA5C,iBACA,8BAAI,KAAOhB,EAAKe,MAAM,KAAKC,OAA3B,gBACA,yCACA,4BAAIhB,EAAKgB,OAAO,EAAIhB,EAAO,2CC2BxBiB,MA9Df,WAEE,MAAwBlB,mBAAS,SAAjC,mBAAOhB,EAAP,KAAamC,EAAb,KACA,EAAoCnB,mBAAS,oBAA7C,mBAAOP,EAAP,KAAmB2B,EAAnB,KACA,EAA0BpB,mBAAS,QAAnC,mBAAOH,EAAP,KAAcwB,EAAd,KAEMP,EAAU,SAACQ,EAAQnC,GACvBkC,EAAS,CAAEvB,IAAMwB,EACjBnC,KAAOA,IACPoC,YAAW,WACTF,EAAS,QACT,OAgBJ,OACE,qCAGA,cAACxC,EAAD,CAAQK,MAAQ,YAAYF,KAAQA,EAAMM,WAjBzB,WACL,UAATN,GACDmC,EAAQ,QACRC,EAAc,qBACdI,SAASC,KAAKtB,MAAMQ,gBAAkB,OACtCG,EAAU,oBAAoB,aAE9BK,EAAQ,SACRC,EAAc,oBACdI,SAASC,KAAKtB,MAAMQ,gBAAkB,QACtCG,EAAU,qBAAqB,aAOmCrB,WAAcA,IAClF,cAAC,EAAD,CAAOI,MAASA,IAChB,cAACE,EAAD,CAAUM,QAAU,mCAAmCrB,KAAQA,EAAM8B,UAAaA,QC1CvEY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,K","file":"static/js/main.46dcc5a6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n{/*import {Link} from 'react-router-dom';*/}\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n       {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li>\r\n        \r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">Contact</a>\r\n        </li>*/}\r\n      </ul>\r\n\r\n      <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick = {props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.switchText}</label>\r\n</div>\r\n      { /*<form className=\"d-flex\">\r\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n    \r\n    );\r\n}\r\nNavbar.propTypes={\r\n                    title: PropTypes.string.isRequired,\r\n                    aboutText:PropTypes.string.isRequired\r\n\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : \"Set Title here\",\r\n    aboutText : \"About Us\"\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n   {/* const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        console.log(lower.charAt(0).toUpperCase() + lower.slice(1));\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        \r\n    } */}\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{props.alert.type}</strong>: {props.alert.msg} \r\n  \r\n</div>\r\n    );\r\n}\r\n\r\nexport default Alert\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        \r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const handleLoClick = () =>{\r\n        \r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n    const handleClearClick = () =>{\r\n        \r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared\",\"success\");\r\n    }\r\n    const handleCapitalClick = () =>{\r\n\r\n        \r\n       \r\n        }\r\n      \r\n       \r\n    \r\n\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text,setText] = useState(\"\");\r\n    return (\r\n\r\n        <>\r\n        <div className = \"container my-4 \" style = {{color : props.mode === \"light\" ? \"black\" : \"white\"}}>\r\n        <h3>{props.heading}</h3>\r\n        <form>\r\n            <div className=\"form-group my-3\">\r\n                <textarea className=\"form-control \" id=\"exampleFormControlTextarea1\" value = {text} onChange = {handleOnChange} rows=\"8\" style = {{backgroundColor : props.mode === \"dark\" ? \"grey\" : \"white\", color : props.mode === \"light\" ? \"black\" : \"white\" }}></textarea>\r\n            </div>\r\n        </form>\r\n        <button className = \"btn btn-primary mx-2\" onClick = {handleUpClick}>Convert to uppercase</button>\r\n        <button className = \"btn btn-primary mx-2\" onClick = {handleLoClick}>Convert to lowercase</button>\r\n        <button className = \"btn btn-primary mx-2\" onClick = {handleClearClick}>Clear text</button>\r\n        <button className = \"btn btn-primary mx-2\" onClick = {handleCapitalClick}>Capitalized case</button>\r\n        </div>\r\n\r\n        <div className = \"container my-3\" style = {{color : props.mode === \"light\" ? \"black\" : \"white\"}}>\r\n            <h4>Your text summary</h4>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *text.split(\" \").length} read time</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0 ? text : \"Enter your text above to preview\"}</p>\r\n\r\n        </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n","\nimport './App.css';\nimport React, { useState } from 'react';\nimport Navbar from './Components/Navbar';\nimport Alert from './Components/Alert';\nimport TextForm from './Components/TextForm';\n\n{/*import About from './Components/About';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";*/}\n\n\n\n\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [switchText, setSwitchText] = useState(\"Enable dark mode\");\n  const [alert, setAlert] = useState(\"null\");\n\n  const showAlert=(message,type)=>{\n    setAlert({ msg : message,\n    type : type});\n    setTimeout(() => {\n      setAlert(null)\n    },1500);\n  }\n\n  const toggleMode = () =>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      setSwitchText(\"Enable light mode\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"dark mode enabled\",\"success\");\n    } else {\n      setMode(\"light\");\n      setSwitchText(\"Enable dark mode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"light mode enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n\n    {/*<Router>*/}\n    <Navbar title = \"TextUtils\" mode = {mode} toggleMode = {toggleMode} switchText = {switchText}/>\n    <Alert alert = {alert}/>\n    <TextForm heading = \"Enter your text below to analyze\" mode = {mode} showAlert = {showAlert}/> \n    \n    {/*<Routes>\n    \n    <Route exact path=\"about\" element={<About />} />\n    <Route exact path=\"/\" element={<TextForm heading = \"Enter your text below to analyze\" mode = {mode} showAlert = {showAlert}/>  } />\n    \n          \n        </Routes>\n    \n    \n    \n    */}\n    \n    \n\n   {/* <div className=\"list\">\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/about\">About us</Link></li>\n            \n          </ul>\n        </div>\n    </Router>*/}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}